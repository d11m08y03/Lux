#include <SDL2/SDL_pixels.h>
#include <cstdlib>
#include <ostream>
#include <vector>
#include <iostream>
#include <SDL2/SDL_rect.h>
#include <SDL2/SDL.h>
#include <SDL2/SDL_error.h>
#include <SDL2/SDL_events.h>
#include <SDL2/SDL_render.h>
#include <SDL2/SDL_video.h>
#include <SDL2/SDL_image.h>
#include <SDL2/SDL_ttf.h>

struct Particle
{
    int x, y, x_vel, y_vel;
};

void cleanup(int stage) {
    switch (stage) {
        case 1: 
            SDL_Quit();
            break;

        case 2:
            IMG_Quit();
            SDL_Quit();
            break;

        case 3:
            IMG_Quit();
            TTF_Quit();
            SDL_Quit();
            break;

        default:
            std::cout << "[Error] Wrong stage number.\n";
            break;
    }
}

int main (int argc, char *argv[]) {
    const int WINDOW_SCALE_FACTOR = 70;
    const int WINDOW_WIDTH = 16 * WINDOW_SCALE_FACTOR;
    const int WINDOW_HEIGHT = 9 * WINDOW_SCALE_FACTOR;
    const int PARTICLE_SIZE = 2;

    // Initializing SDL
    if (SDL_Init(SDL_INIT_EVERYTHING) != 0) {
        std::cout << "Error at SDL_Init. " << SDL_GetError() << std::endl;
        return EXIT_FAILURE;
    }

     // Initialize SDL2_image
    int flags = IMG_INIT_PNG; 
    if((IMG_Init(flags) & flags) != flags) {
        std::cout << "Error at IMG_Init. " << SDL_GetError() << std::endl;
        cleanup(1);
        return EXIT_FAILURE;
    }

    if (TTF_Init() != 0) {
        std::cout << "Error at TTF_Init. " << SDL_GetError() << std::endl;
        cleanup(2);
        return EXIT_FAILURE;
    }

    SDL_Window* window = SDL_CreateWindow("Balls", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, WINDOW_WIDTH, WINDOW_HEIGHT, SDL_WINDOW_SHOWN);
    if (window == nullptr) {
        std::cout << "Error at SDL_CreateWindow. " << SDL_GetError() << std::endl;
        cleanup(3);
        return EXIT_FAILURE;
    }

    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
    if (renderer == nullptr) {
        std::cout << "Error at SDL_CreateRenderer. " << SDL_GetError() << std::endl;
        SDL_DestroyWindow(window);
        cleanup(3);
        return EXIT_FAILURE;
    }

    // Generating particles
    std::vector<Particle> particles;
    for (int i = 0; i < 100; i++) {
        particles.push_back(Particle { 
                .x = rand() % WINDOW_WIDTH,
                .y = rand() % WINDOW_HEIGHT,
                .x_vel = rand() % 10,
                .y_vel = rand() % 10,
            }
        );
    }

    // Loading image
    SDL_Texture* img = IMG_LoadTexture(renderer, "res/images/one.jpg");
    if (img == nullptr) {
        std::cout << "Error at IMG_LoadTexture. " << SDL_GetError() << std::endl;
        SDL_DestroyWindow(window);
        SDL_DestroyRenderer(renderer);
        cleanup(3);
        return EXIT_FAILURE;
    }

    // Loading fonts
    TTF_Font* font = TTF_OpenFont("res/fonts/OpenSans-Semibold.ttf" , 35);
    SDL_Surface* font_surface = TTF_RenderText_Solid(font, "Balls", SDL_Color {255, 255, 255});
    SDL_Texture* font_texture = SDL_CreateTextureFromSurface(renderer, font_surface);
    SDL_Rect font_src;
    SDL_QueryTexture(font_texture, NULL, NULL, &font_src.w, &font_src.h);
    SDL_Rect font_dst {
        (WINDOW_WIDTH / 2) - font_src.w / 2,
        100, 
        font_src.w, 
        font_src.h
    };

    bool running {true};
    SDL_Event event;

    while (running) {
        while (SDL_PollEvent(&event)) {
            if (event.type == SDL_QUIT) running = false;
        }

        SDL_RenderClear(renderer);

        SDL_RenderCopy(renderer, img, NULL, NULL);

        SDL_RenderCopy(renderer, font_texture, NULL, &font_dst);

        SDL_SetRenderDrawColor(renderer, 255, 255, 255, 0);

        for (auto p : particles) {
            SDL_Rect temp_p {.x = p.x, .y = p.y, .w = PARTICLE_SIZE, .h = PARTICLE_SIZE};
            SDL_RenderDrawRect(renderer, &temp_p);
        }

        SDL_SetRenderDrawColor(renderer, 0, 0, 0, 0);

        SDL_RenderPresent(renderer);

        for (auto &p : particles) {
            p.x += p.x_vel;
            p.y += p.y_vel;

            if (p.x > WINDOW_WIDTH || p.y > WINDOW_HEIGHT) {
                p.x = rand() % WINDOW_WIDTH;
                p.y = rand() % WINDOW_HEIGHT;
            }
        }
    }

    TTF_CloseFont(font);
    SDL_FreeSurface(font_surface);
    SDL_DestroyTexture(font_texture);
    SDL_DestroyTexture(img);
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);

    cleanup(3);

    return EXIT_SUCCESS;
}

